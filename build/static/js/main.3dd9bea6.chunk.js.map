{"version":3,"sources":["BooksAPI.js","ListBooks.js","BookShelf.js","SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","ListBooks","whichShelf","myReads","bookID","matching","toConsumableArray","currentlyReading","wantToRead","read","find","m","_this2","this","_this$props","props","onUpdateBookShelf","react_default","a","createElement","className","map","key","style","width","height","background","imageLinks","smallThumbnail","backgroundSize","onChange","event","target","value","disabled","title","authors","join","Component","BookShelf","shelfTitle","src_ListBooks","SearchBooks","state","foundBooks","updateQuery","_this","setState","trim","performSearch","BooksAPI","length","currentState","react_router_dom","to","type","placeholder","BooksApp","updateBookShelf","newStatus","currentShelf","_ref","defineProperty","filter","c","b","_this3","react_router","exact","path","basename","render","src_BookShelf","_ref4","history","src_SearchBooks","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3dd9bea6.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from \"react\"\nimport PropTypes from \"prop-types\"\n\nclass ListBooks extends Component {\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    myReads: PropTypes.object.isRequired,\n    onUpdateBookShelf: PropTypes.func.isRequired\n  }\n\n  //  Helper function to return the shelf option required.\n  //  This function is specially needed for the search page\n  //  in order to set the initial options for the books not\n  //  in our library.\n  whichShelf = (myReads, bookID) => {\n    let allBooks = [\n      ...myReads.currentlyReading,\n      ...myReads.wantToRead,\n      ...myReads.read\n    ]\n    let matching = allBooks.find(m => m.id === bookID)\n\n    return matching ? matching.shelf : \"none\"\n  }\n\n  render() {\n    const { books, myReads, onUpdateBookShelf } = this.props\n    return (\n      <ol className=\"books-grid\">\n        {/* Check that books is not empty before rendering inside <ol> \n        books can be an empty array when this component is called by SearchBooks*/}\n        {books &&\n          books.map(book => (\n            <li key={book.id}>\n              <div className=\"book\">\n                <div className=\"book-top\">\n                  <div\n                    className=\"book-cover\"\n                    style={{\n                      width: 128,\n                      height: 170,\n                      background:\n                        book.imageLinks &&\n                        `url(${\n                          book.imageLinks.smallThumbnail\n                        }) no-repeat center top`,\n                      backgroundSize: \"cover\"\n                    }}\n                  />\n                  <div className=\"book-shelf-changer\">\n                    <select\n                      onChange={event =>\n                        onUpdateBookShelf(event.target.value, book)\n                      }\n                      value={this.whichShelf(myReads, book.id)}\n                    >\n                      <option value=\"move\" disabled>\n                        Move to...\n                      </option>\n                      <option value=\"currentlyReading\">\n                        Currently Reading\n                      </option>\n                      <option value=\"wantToRead\">Want to Read</option>\n                      <option value=\"read\">Read</option>\n                      <option value=\"none\">None</option>\n                    </select>\n                  </div>\n                </div>\n                <div className=\"book-title\">{book.title}</div>\n                <div className=\"book-authors\">\n                  {/* some authors are undefined and we need to check \n                  before using join on each value of the book.authors\n                  array*/}\n                  {book.authors && book.authors.join(\"\\n\")}\n                </div>\n              </div>\n            </li>\n          ))}\n      </ol>\n    )\n  }\n}\n\nexport default ListBooks\n","import React, { Component } from \"react\"\nimport ListBooks from \"./ListBooks\"\nimport PropTypes from \"prop-types\"\n\nclass BookShelf extends Component {\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    myReads: PropTypes.object.isRequired,\n    shelfTitle: PropTypes.string.isRequired,\n    onUpdateBookShelf: PropTypes.func.isRequired\n  }\n  render() {\n    const { books, myReads , shelfTitle, onUpdateBookShelf } = this.props\n\n    return (\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{shelfTitle}</h2>\n        <div className=\"bookshelf-books\">\n          <ol className=\"books-grid\" />\n          <ListBooks books={books} myReads={myReads} onUpdateBookShelf={onUpdateBookShelf}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BookShelf\n","import React, { Component } from \"react\"\nimport { Link } from 'react-router-dom'\nimport * as BooksAPI from \"./BooksAPI\"\nimport ListBooks from \"./ListBooks\"\nimport PropTypes from \"prop-types\"\n\nclass SearchBooks extends Component {\n  static propTypes = {\n    onUpdateBookShelf: PropTypes.func.isRequired\n  }\n  \n  state = {\n    query: \"\",\n    foundBooks: []\n  }\n\n  updateQuery = query => {\n    this.setState(() => ({\n      query: query.trim()\n    }))\n    this.performSearch(query)\n  }\n\n  performSearch = query => {\n    // Don't trigger API call on empty search\n    query !== \"\" &&\n      BooksAPI.search(query).then(books => {\n        if (books.length > 1) {\n          this.setState(currentState => ({\n            foundBooks: books\n          }))\n        } else {\n          this.setState(currentState => ({\n            foundBooks: []\n          }))\n        }\n      })\n    query === \"\" &&\n      this.setState(currentState => ({\n        foundBooks: []\n      }))\n  }\n\n  render() {\n    const { foundBooks } = this.state\n    const { myReads, onUpdateBookShelf } = this.props\n\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link\n            className=\"close-search\"\n            to=\"/\"\n          >\n            Close\n          </Link>\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              onChange={event => this.updateQuery(event.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ListBooks books={foundBooks} myReads={myReads} onUpdateBookShelf={onUpdateBookShelf} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBooks\n","import React, { Component } from \"react\"\nimport * as BooksAPI from \"./BooksAPI\"\nimport BookShelf from \"./BookShelf\"\nimport SearchBooks from \"./SearchBooks\"\nimport { Route, Link } from \"react-router-dom\"\nimport \"./App.css\"\n\nclass BooksApp extends Component {\n  state = {\n    currentlyReading: [],\n    wantToRead: [],\n    read: []\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll().then(books => {\n      this.setState(currentState => ({\n        currentlyReading: books.filter(b => {\n          return b.shelf === \"currentlyReading\"\n        }),\n        wantToRead: books.filter(b => {\n          return b.shelf === \"wantToRead\"\n        }),\n        read: books.filter(b => {\n          return b.shelf === \"read\"\n        })\n      }))\n    })\n  }\n\n  updateBookShelf = (newStatus, book) => {\n    const currentShelf = book.shelf\n\n    if (newStatus !== \"none\" && currentShelf && currentShelf !== \"none\") {\n      this.setState(currentState => ({\n        [newStatus]: currentState[newStatus].concat([book]),\n        [currentShelf]: currentState[currentShelf].filter(c => {\n          return c.id !== book.id\n        })\n      }))\n    } else if (currentShelf || currentShelf === \"none\") {\n      this.setState(currentState => ({\n        [currentShelf]: currentState[currentShelf].filter(c => {\n          return c.id !== book.id\n        })\n      }))\n    } else {\n      this.setState(currentState => ({\n        [newStatus]: currentState[newStatus].concat([book])\n      }))\n    }\n    book.shelf = newStatus\n    BooksAPI.update(book, newStatus)\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route\n          exact\n          path=\"/\"\n          basename='/MyReads'\n          render={() => (\n            <div className=\"list-books\">\n              <div className=\"list-books-title\">\n                <h1>\n                  &#10074;&#10073;&#10072; MyReads &#10074;&#10073;&#10072;\n                </h1>\n              </div>\n              <div className=\"list-books-content\">\n                <div>\n                  <BookShelf\n                    books={this.state.currentlyReading}\n                    myReads={this.state}\n                    shelfTitle=\"Currently Reading\"\n                    onUpdateBookShelf={this.updateBookShelf}\n                  />\n                  <BookShelf\n                    books={this.state.wantToRead}\n                    myReads={this.state}\n                    shelfTitle=\"Want to Read\"\n                    onUpdateBookShelf={this.updateBookShelf}\n                  />\n                  <BookShelf\n                    books={this.state.read}\n                    myReads={this.state}\n                    shelfTitle=\"Read\"\n                    onUpdateBookShelf={this.updateBookShelf}\n                  />\n                </div>\n              </div>\n              <Link to=\"/search\" className=\"open-search\">\n                <button>Add a book</button>\n              </Link>\n            </div>\n          )}\n        />\n        <Route\n          path=\"/search\"\n          basename='/MyReads'\n          render={({ history }) => (\n            <SearchBooks\n              myReads={this.state}\n              onUpdateBookShelf={this.updateBookShelf}\n            />\n          )}\n        />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport App from \"./App\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}